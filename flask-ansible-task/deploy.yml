---
# Ansible playbook for deploying a Flask app
# Install system apt packages
- hosts: all
  become: yes
  become_method: sudo
  remote_user: ubuntu
  tasks:
  - name: Install Packages
    ansible.builtin.apt:
      pkg:
      - python3-pip
      - python3-dev
      - python3
      - nginx
      - gunicorn
      - virtualenv
      update_cache: yes
      cache_valid_time: 3600

# Install the app, note: don't do these tasks with become sudo
- hosts: all
  remote_user: ubuntu
  tasks:
  - name: clone repo
    git:
      repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
      dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
      update: yes  # Does a git pull if the repo already exists
      force: yes
  - name: install modules in a virtualenv
    pip:
      requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
      virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
      virtualenv_python: python3

# Configure app systemd service and nginx
- hosts: all
  remote_user: ubuntu
  become: yes
  become_method: sudo
  tasks:
  - name: daemon_reload
    ansible.builtin.systemd:
      daemon_reload: yes
  - name: template systemd service config
    template:
      src: .service
      dest: /etc/systemd/system/{{ app_name }}.service
  - name: start systemd app service
    systemd: name={{ app_name }}.service state=restarted enabled=yes
  - name: template nginx site config
    template:
      src: .nginx
      dest: /etc/nginx/sites-available/{{ app_name }}
  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent
  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes
  - name: change user for nginx.conf
    raw: sed -i 's/www-data/ubuntu/' /etc/nginx/nginx.conf
  - name: restart nginx
    systemd: name=nginx state=restarted enabled=yes
  - name: open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full

# Run a quick test to verify the site is working
- hosts: all
  become: yes
  tasks:

  - name: get url
    get_url:
      url: http://127.0.0.1
      dest: /tmp/index.html

  - name: read html
    shell: cat /tmp/index.html
    register: html_contents

  - name: check for string in html
    when: html_contents.stdout.find('hello') != -1
    debug: msg="success!"
